{"version":3,"sources":["components/Item/Item.js","store/actions/itemsHandler.js","store/actions/actionTypes.js","components/SearchBar/SearchBar.js","components/List/List.js","App.js","serviceWorker.js","store/reducers/itemsHandlerReducer.js","index.js"],"names":["Item","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dialogBoxOpen","setState","dialogBoxVisable","dialogBoxClose","dialogBoxHandler","handleType","listType","index","itemRemove","itemDuplicate","dialogBox","classes","react_default","a","createElement","Box","className","display","state","justifyContent","alignItems","Button","color","button","variant","aria-label","onClick","listTitle","i","FileCopy_default","Card","card","onMouseEnter","onMouseLeave","CardMedia","cardMedia","image","height","flexDirection","p","Typography","typography","genre","Avatar","avatar","src","artist_image","typographyf","artist_name","split","map","word","toUpperCase","slice","join","name","Chip","label","tracks_number","chip","concat","quantity_in_stock","quantity","Component","connect","dispatch","lsType","type","payload","actionCreators","withStyles","theme","_cardMedia","palette","primary","main","margin","borderRadius","width","backgroundColor","backgroundBlendMode","defineProperty","breakpoints","down","up","overflow","position","boxShadow","fab","fontFamily","SearchBar","onSubmit","filterList","inputValue","evt","target","value","_this2","style","padding","Input","fullWidth","textField","id","onChange","event","updateInputValue","placeholder","endAdornment","InputAdornment","Search_default","size","filterReset","search","List","handleDelete","remove","handleDuplicate","dulipcate","Container","m","maxWidth","title","components_SearchBar_SearchBar","GridList","gridList","spacing","listItems","item","components_Item_Item","key","_gridList","flexWrap","App","storeInitialData","Data","vinyl_records","cds","components_List_List","filteredRecordLs","length","initialRecordItems","filteredCdLs","initialCdItems","list","itemType","toLowerCase","InitialData","Boolean","window","location","hostname","match","initialState","itemsListReducer","arguments","undefined","action","objectSpread","toConsumableArray","searchedRecord","itemsToFilter","filter","includes","alert","searchedCd","itemsToFilterCd","updateList","recordFilterdCase","indexOf","cdFilterdCase","updateFilter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","itemsHandlerReducer","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a05de0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Box , Card , CardMedia , Avatar, Typography , Chip }  from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport { Button }  from '@material-ui/core';\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\n\r\nimport '../List/List.scss'\r\n\r\n\r\nconst styles = theme => ({\r\n    palette: {\r\n        primary: {\r\n          main: '#1d5fd8',\r\n        }\r\n    },\r\n    button:{\r\n        margin: '5px',\r\n        borderRadius: '20px',\r\n        width: '100px'\r\n    },\r\n    cardMedia: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.85)',\r\n        backgroundBlendMode: 'soft-light',\r\n      [theme.breakpoints.down('xs')]: {\r\n        height: '55vh',\r\n        width: '95vw',\r\n        \r\n      },\r\n  \r\n      [theme.breakpoints.up('sm')]: {\r\n        height: 400,\r\n        width: 330,\r\n      },\r\n    },\r\n    avatar:{\r\n        height: 50,\r\n        width: 50,\r\n\r\n    },\r\n    card:{\r\n        overflow: 'unset',\r\n        margin: 5,\r\n        position: 'relative',\r\n        boxShadow: '0 10px 30px 0 rgba(207, 217, 230, 0.5), 10px 10px 30px 0 #e8ecf1'\r\n    },\r\n    fab:{\r\n        width: 100,\r\n        margin: 5\r\n    },\r\n    typography:{\r\n        color:'white',\r\n        fontFamily: `'Varela Round', sans-serif`\r\n    },\r\n    typographyf:{\r\n        color:'white',\r\n        fontFamily: `'Suez One', serif`\r\n\r\n    },\r\n    chip:{\r\n        color:'white',\r\n        fontFamily: `'Varela Round', sans-serif`,\r\n        backgroundColor: 'hsla(0, 0%, 85.1%, 0.5)'\r\n    }\r\n  });\r\n\r\nclass Item extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            dialogBoxVisable: false\r\n        }\r\n    }\r\n\r\n    dialogBoxOpen = () => {\r\n        this.setState({\r\n            dialogBoxVisable: true\r\n        })\r\n    }\r\n\r\n    dialogBoxClose = () => {\r\n        this.setState({\r\n            dialogBoxVisable: false\r\n            \r\n        })\r\n    }\r\n\r\n    dialogBoxHandler = (handleType ,listType, index ) => {\r\n        this.dialogBoxClose()\r\n        handleType === 'remove'? \r\n        this.props.itemRemove(listType , index) : this.props.itemDuplicate(listType , index)\r\n    }\r\n\r\n    dialogBox = () => {\r\n        const { classes } = this.props;\r\n        return(\r\n        <Box className=\"dialogBox\" display={this.state.dialogBoxVisable? 'flex' : 'none'} justifyContent=\"center\" alignItems=\"center\">\r\n            <Button color=\"primary\" className={classes.button} variant=\"contained\" aria-label=\"Add\" onClick= {() => this.dialogBoxHandler('duplicate' , this.props.listTitle , this.props.i)}>\r\n            <FileCopy /></Button>\r\n            <Button color=\"default\" className={classes.button} variant=\"contained\" aria-label=\"Add\" onClick= {() => this.dialogBoxHandler('remove' , this.props.listTitle , this.props.i)}>delete</Button>\r\n        </Box>\r\n      )\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <Card className={classes.card} \r\n                onMouseEnter={this.dialogBoxOpen} \r\n                onClick={this.dialogBoxOpen} \r\n                onMouseLeave={this.dialogBoxClose}>\r\n                {this.state.dialogBoxVisable? this.dialogBox() : null}\r\n                <CardMedia className={classes.cardMedia} image={this.props.image}>\r\n                    <Box display=\"flex\" \r\n                        height=\"92%\" \r\n                        flexDirection=\"column\" \r\n                        justifyContent=\"space-between\" p={2}>\r\n                        <Box display=\"flex\" \r\n                            justifyContent=\"space-between\" \r\n                            alignItems=\"center\">\r\n                            <Typography className={classes.typography} variant=\"body1\">{this.props.genre}</Typography>\r\n                            <Avatar className={classes.avatar} src={this.props.artist_image}/>\r\n                        </Box>\r\n                        <Box>\r\n                            <Typography className={classes.typographyf} variant=\"h4\">\r\n                                {this.props.artist_name.split(' ')\r\n                                .map(word => word[0].toUpperCase()+ word.slice(1))\r\n                                .join(' ')}\r\n                            </Typography>\r\n                            <Typography className={classes.typography} variant=\"subtitle1\">\r\n                                {this.props.name.split(' ')\r\n                                .map(word => word[0].toUpperCase()+ word.slice(1))\r\n                                .join(' ')}\r\n                            </Typography> \r\n                        </Box>\r\n                        <Box display=\"flex\" \r\n                            justifyContent=\"space-between\" \r\n                            alignItems=\"center\">\r\n                            <Chip label={this.props.tracks_number} className={classes.chip}/>\r\n                            <Chip label={`${this.props.quantity_in_stock}/${this.props.quantity}`} className={classes.chip}/>\r\n                        </Box>\r\n                    </Box>\r\n                </CardMedia>\r\n        </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        itemRemove: (lsType, index) => dispatch(actionCreators.itemRemove(lsType, index)),\r\n        itemDuplicate: (lsType, index) => dispatch(actionCreators.itemDuplicate(lsType, index)) \r\n    }\r\n  }\r\n \r\n  export default connect('', mapDispatchToProps)(withStyles(styles)(Item));","import * as actionTypes from './actionTypes';\r\n\r\n\r\nexport const InitialData = (item , itemType) => {\r\n    item.artist_name = item.artist_name.toLowerCase()\r\n    item.name = item.name.toLowerCase()\r\n        \r\n    return {\r\n        type: actionTypes.STORE_INITIAL_DATA,\r\n        payload: {\r\n            item: item,\r\n            itemType: itemType\r\n        }\r\n    }\r\n}\r\n\r\nexport const storeInitialData = (list , itemType) => {\r\n    return dispatch => {   \r\n            list.map((item) => { \r\n                return(\r\n                dispatch(InitialData(item, itemType)))\r\n                })\r\n    }\r\n}\r\n\r\nexport const filterList = (search, listType) => {\r\n    const filterActionType = \r\n        listType === 'Vinyl Records' ? actionTypes.FILTER_RECORDS_LIST : actionTypes.FILTER_CDS_LIST\r\n    return {\r\n        type: filterActionType,\r\n        search\r\n        \r\n    }\r\n}\r\n\r\nexport const filterReset = (listType) => {\r\n    return {\r\n        type: actionTypes.FILTER_RESET,\r\n        listType\r\n    }\r\n}\r\n\r\nexport const itemRemove = (lsType, index) => {\r\n    return {\r\n        type: actionTypes.REMOVE,\r\n        payload: {\r\n            lsType,\r\n            index\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const itemDuplicate = (lsType, index) => {\r\n    return {\r\n        type: actionTypes.DUPLICATE,\r\n        payload: {\r\n            lsType,\r\n            index\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// export const setSelectedMovieData = (payload) => {\r\n//     const durationHandler = formatDuration(payload.contentDetails.duration) \r\n//     const publishedDateHandler = new Date(payload.snippet.publishedAt).toString().split(' ')\r\n//     const viewsHandler = formatViews(payload.statistics.viewCount)\r\n//     return {\r\n//         type: actionTypes.SET_SELECTED_MOVIE_INFO,\r\n//         payload:{\r\n//             Title: payload.snippet.title,\r\n//             ChannelTitle: payload.snippet.channelTitle,\r\n//             ChannelId: payload.snippet.channelId,\r\n//             PublishedAt: `${publishedDateHandler[1]} ${publishedDateHandler[2]}, ${publishedDateHandler[3]}`,\r\n//             FormatedDur: durationHandler,\r\n//             Duration: payload.contentDetails.duration,\r\n//             ViewCount: viewsHandler,\r\n//             SourceVC: payload.statistics.viewCount,\r\n//             VideoUrl: payload.snippet.thumbnails.medium.url,\r\n//             LikeCount:Number(payload.statistics.likeCount),\r\n//             DislikeCount: Number(payload.statistics.dislikeCount),\r\n//             FavoriteCount:Number(payload.favoriteCount),\r\n//             CommentsCount: payload.statistics.commentCount,\r\n//             Description: payload.snippet.description,\r\n//             DescriptionShorten: description(payload.snippet.description),\r\n//             VideoIdEmbedUrl: `https://www.youtube.com/embed/${payload.id}`,\r\n//             VideoIdId: payload.id,\r\n//             ReactionMode: null\r\n//             }\r\n//     }\r\n// }\r\n\r\n// export const fetchWatchMovie = (payload) => {\r\n//     return dispatch => { \r\n//             axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${payload}&key=${API_KEY}`)\r\n//             .then(res => {\r\n//                 dispatch(setSelectedMovieData(res.data.items[0]))\r\n//                 dispatch(initChannelData(res.data.items[0].snippet.channelId))})\r\n//             .catch(error => console.log(error))  \r\n//     }\r\n// }\r\n\r\n// export const setChannelData = (payload) => {\r\n//     return {\r\n//         type: actionTypes.SET_CHANNEL_DATA,\r\n//         payload: {\r\n//              Thumbnail: payload.snippet.thumbnails.default.url,\r\n//              Title:payload.snippet.title,\r\n//             }\r\n//     }\r\n// }\r\n\r\n// export const initChannelData = (ChannelID) => {\r\n//     return dispatch => { \r\n//         axios.get(`https://www.googleapis.com/youtube/v3/channels?part=snippet,contentDetails,statistics&id=${ChannelID}&key=${API_KEY}`)\r\n//              .then(res => {\r\n//                  dispatch(setChannelData(res.data.items[0]))})\r\n//                 .catch(error => console.log(error))       \r\n//     }\r\n// }\r\n\r\n// export const setSelectedMovieComments = (payload) => {\r\n//     const pubdate = formatDate(payload.snippet.topLevelComment.snippet.publishedAt)\r\n\r\n//     return {\r\n//         type: actionTypes.SET_MOVIE_COMMENTS,\r\n//         payload:{\r\n//             CommentId:payload.id,\r\n//             Comment: payload.snippet.topLevelComment.snippet.textDisplay,\r\n//             UserPic: payload.snippet.topLevelComment.snippet.authorProfileImageUrl.replace('s28','s40'),\r\n//             AuthorDisplayName: payload.snippet.topLevelComment.snippet.authorDisplayName,\r\n//             LikeCount: payload.snippet.topLevelComment.snippet.likeCount,\r\n//             DislikeCount: payload.snippet.topLevelComment.snippet.dislikeCount? payload.snippet.topLevelComment.snippet.dislikeCount : 0 ,\r\n//             ReactionMode: null,\r\n//             PublishdAtSource: payload.snippet.topLevelComment.snippet.publishedAt,\r\n//             PublishedAt: pubdate\r\n//         }\r\n        \r\n//     }\r\n// }\r\n\r\n// export const setSelectedMovieDataComments = (payload) => {\r\n//     return {\r\n//         type: actionTypes.SET_MOVIE_DATA_COMMENTS,\r\n//         payload    \r\n//     }\r\n// }\r\n\r\n// export const clearCommentsList = (dataMode) => {\r\n//     return {\r\n//     type: actionTypes.CLEAR_COMMENTS_LIST,\r\n//     payload: dataMode\r\n//     }\r\n// }\r\n\r\n// export const initMovieComments = (movieId) => {\r\n//     return dispatch => {   \r\n//         axios.all([\r\n//             axios.get(`https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=${movieId}&key=${API_KEY}`),\r\n//             axios.get(`https://yt-clone-e7862.firebaseio.com/comments/${movieId}.json`)\r\n//         ])\r\n//         .then(axios.spread((res1, res2) => {\r\n//             res1.data.items.map(comment => \r\n//                 dispatch(setSelectedMovieComments(comment)))\r\n//             Object.values(res2.data).map(comment =>\r\n//                 dispatch(setSelectedMovieDataComments(comment)))\r\n//             }))\r\n//             .catch(error => console.log(error))\r\n//     }\r\n// }\r\n\r\n// export const reactionHandler = (reactionMode,reactiontype,reactionid) => {\r\n//         if (reactiontype === 'movie'){ \r\n//         return {\r\n//             type: actionTypes.MOVIE_REACTION_ADJUSMENTS,\r\n//             reaction: reactionMode\r\n//         }\r\n//         }else if (reactiontype === 'comment'){\r\n//             return{\r\n//             type: actionTypes.COMMENT_REACTION_ADJUSMENTS,\r\n//             reaction: reactionMode,\r\n//             id:reactionid\r\n//         }\r\n// }\r\n// }\r\n\r\n// export const handleCommentSubmit = (comment,movieId) => {\r\n//     const time = new Date(Date.now()).toISOString()\r\n//     const timeConverted = formatDate(time)\r\n//     const commentPayload = {\r\n//         AuthorDisplayName:'Benny Pakman',\r\n//         Comment: comment,\r\n//         CommentId: comment,\r\n//         DislikeCount: 0,\r\n//         LikeCount: 0,\r\n//         PublishedAt: timeConverted,\r\n//         ReactionMode: \"\",\r\n//         UserPic: 'https://yt3.ggpht.com/-PcciNQlrmUE/AAAAAAAAAAI/AAAAAAAAAAA/D1j1-rfjOpw/s88-c-k-no-mo-rj-c0xffffff/photo.jpg',\r\n//       }\r\n//       axios.post(`https://yt-clone-e7862.firebaseio.com/comments/${movieId}.json`,commentPayload)\r\n\r\n//       return (\r\n//         {\r\n//         type: actionTypes.ADD_COMMENT,\r\n//         payload: commentPayload\r\n//         }\r\n//     )\r\n// }","export const STORE_INITIAL_DATA = 'STORE_INITIAL_DATA';\r\nexport const FILTER_RECORDS_LIST = 'FILTER_RECORDS_LIST';\r\nexport const FILTER_CDS_LIST = 'FILTER_CDS_LIST';\r\nexport const FILTER_RESET = 'FILTER_RESET';\r\nexport const REMOVE = 'REMOVE';\r\nexport const DUPLICATE = 'DUPLICATE'","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {InputAdornment , Input }  from '@material-ui/core';\r\nimport * as actionCreators from '../../store/actions/index';\r\nimport { Button }  from '@material-ui/core';\r\nimport '../List/List.scss';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = () => ({\r\n    button:{\r\n        margin: 2,\r\n        borderRadius: 20\r\n    },\r\n    textField:{\r\n        width: '80%',\r\n    },\r\n    palette: {\r\n        primary: {\r\n          main: 'red',\r\n        }\r\n    }\r\n  });\r\n  \r\n\r\nclass SearchBar extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state= {\r\n            inputValue: ''\r\n        }\r\n    }\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({\r\n          inputValue: evt.target.value\r\n        });\r\n      }\r\n\r\n      onSubmit = () => {\r\n        this.props.filterList(this.state.inputValue, this.props.listType)\r\n        this.setState({\r\n            inputValue: ''\r\n          });\r\n    }\r\n\r\n    render(){\r\n        const { classes } = this.props;\r\n        return(\r\n            <div style={{display: 'flex' , alignItems: 'center' , justifyContent: 'space-between' , padding: '0 5px', margin: '0 0 15px 0'}}>\r\n                    <Input fullWidth\r\n                        className={classes.textField}\r\n                        id=\"adornment-password\"\r\n                        value={this.state.inputValue}\r\n                        onChange={event => this.updateInputValue(event)}\r\n                        placeholder = {`Search for ${this.props.listType}`}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                            <SearchIcon />\r\n                            </InputAdornment>\r\n                        }\r\n                    />\r\n                    <Button \r\n                        size=\"medium\" \r\n                        variant=\"contained\" \r\n                        aria-label=\"Add\" \r\n                        className={classes.button} \r\n                        color=\"primary\" \r\n                        onClick = {event => this.onSubmit(event)}>search\r\n                    </Button>\r\n                    <Button \r\n                        size=\"medium\" \r\n                        variant=\"outlined\" \r\n                        aria-label=\"Add\" \r\n                        className={classes.button} \r\n                        color=\"primary\" \r\n                        onClick = {() => this.props.filterReset(this.props.listType)}>reset\r\n                    </Button>\r\n                </div>  \r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      filterList: (search, listType) => dispatch(actionCreators.filterList(search, listType)),\r\n      filterReset: (listType) => dispatch(actionCreators.filterReset(listType))\r\n  }\r\n}\r\n\r\nexport default connect('',mapDispatchToProps)(withStyles(styles)(SearchBar))\r\n","import React, { Component } from 'react';\r\nimport Item from '../Item/Item';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { GridList , Container}  from '@material-ui/core';\r\nimport './List.scss'\r\n\r\nconst styles = theme => ({\r\n  gridList: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      flexWrap: 'nowrap',\r\n      \r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      flexWrap: 'wrap',\r\n      margin: 'unset!important'\r\n    },\r\n  }\r\n});\r\n\r\nclass List extends Component{\r\n  \r\n\r\n  handleDelete = (lsType, index) => {\r\n    this.props.remove(lsType, index)\r\n  }\r\n\r\n  handleDuplicate = (lsType, index) => {\r\n    this.props.dulipcate(lsType, index)\r\n  }\r\n\r\n  render(){ \r\n    const { classes } = this.props;\r\n    return (\r\n      <Container m={0} maxWidth={false}>\r\n        \r\n        <h2 style={{color: 'rgba(0, 0, 0, 0.85)'}}>{this.props.title}</h2>\r\n        <SearchBar listType = {this.props.title === 'Vinyl Records' ? 'Vinyl Records' : 'Cd'}/>\r\n\r\n        <GridList className={classes.gridList} spacing={20}>\r\n        {this.props.listItems.map((item, index) => \r\n            <Item \r\n            listTitle = {this.props.title}\r\n            key = {index}\r\n            i = {index}\r\n            genre={item.genre}\r\n            artist_image={item.artist_image}\r\n            artist_name={item.artist_name}\r\n            name={item.name}\r\n            image={item.image}\r\n            tracks_number={item.tracks_number}\r\n            quantity_in_stock={item.quantity_in_stock}\r\n            quantity={item.quantity}/>\r\n        )}\r\n        </GridList>\r\n        </Container >\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(List);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from './store/actions/index';\nimport List from './components/List/List'\nimport './App.scss';\nimport Data from './utilites/data';\n\nclass App extends Component{\n  componentDidMount(){\n    this.props.storeInitialData(Data.vinyl_records, 'records')\n    this.props.storeInitialData(Data.cds, 'cds')   \n  }\n  \n\nrender(){\n  return (\n    <div className=\"App\">\n      <List listItems=\n              {\n                this.props.filteredRecordLs.length > 0 ? \n                this.props.filteredRecordLs : \n                this.props.initialRecordItems\n              } \n            title= 'Vinyl Records'/>              \n      <List listItems=             \n              {\n                this.props.filteredCdLs.length > 0 ? \n                this.props.filteredCdLs : \n                this.props.initialCdItems\n              } \n            title= 'Cds'/>\n    </div>\n  );\n}\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    initialRecordItems: state.initialRecordItems,\n    initialCdItems: state.initialCdItems,\n    filteredRecordLs: state.filteredRecordLs,\n    filteredCdLs: state.filteredCdLs\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      storeInitialData: (list, type) => dispatch(actionCreators.storeInitialData(list, type)),\n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = { \r\n    initialCdItems:[],\r\n    initialRecordItems:[],\r\n    filteredRecordLs:[],\r\n    filteredCdLs:[]\r\n};\r\n\r\nconst itemsListReducer = (state= initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.STORE_INITIAL_DATA:\r\n            if(action.payload.itemType === 'records'){ \r\n                return ({\r\n                    ...state,\r\n                    initialRecordItems: [action.payload.item, ...state.initialRecordItems]\r\n                })\r\n            }else{ \r\n                return ({\r\n                    ...state,\r\n                    initialCdItems: [action.payload.item, ...state.initialCdItems]\r\n                })\r\n            }\r\n        case actionTypes.FILTER_RECORDS_LIST:\r\n            const searchedRecord = action.search.toLowerCase();\r\n            const itemsToFilter = state.initialRecordItems.filter(item => {\r\n                return (item.artist_name.includes(searchedRecord) || item.name.includes(searchedRecord))\r\n            })\r\n            itemsToFilter.length <=0 ? alert('no items as been found'): alert(`${itemsToFilter.length} items found`)\r\n\r\n            return {\r\n                ...state,\r\n                filteredRecordLs: itemsToFilter\r\n            }\r\n            case actionTypes.FILTER_CDS_LIST:\r\n                    const searchedCd = action.search.toLowerCase();\r\n                    const itemsToFilterCd = state.initialCdItems.filter(item => {\r\n                        return (item.artist_name.includes(searchedCd) || item.name.includes(searchedCd))\r\n                    })\r\n                    itemsToFilterCd.length <=0 ? alert('no items as been found'): alert(`${itemsToFilterCd.length} items found`)\r\n        \r\n                    return {\r\n                        ...state,\r\n                        filteredCdLs: itemsToFilterCd\r\n                    }\r\n  \r\n        case actionTypes.FILTER_RESET:\r\n            return {\r\n                ...state,\r\n                filteredRecordLs: action.listType === 'Vinyl Records' ? [] : state.filteredRecordLs,\r\n                filteredCdLs: action.listType === 'Cd' ? [] : state.filteredCdLs\r\n            } \r\n        case actionTypes.REMOVE:\r\n                let updateList = []\r\n                const recordFilterdCase = state.initialRecordItems.indexOf(state.filteredRecordLs[action.payload.index])\r\n                const cdFilterdCase = state.initialCdItems.indexOf(state.filteredCdLs[action.payload.index])\r\n                if(action.payload.lsType === 'Vinyl Records'){\r\n                    if(recordFilterdCase >= 0){\r\n                        updateList = state.initialRecordItems.filter((item, i) => i !== recordFilterdCase)\r\n                    }else{\r\n                        updateList = state.initialRecordItems.filter((item, i) => i !== action.payload.index)  \r\n                    }\r\n                }else if(action.payload.lsType === 'Cds'){\r\n                    if(cdFilterdCase >= 0){\r\n                        updateList = state.initialCdItems.filter((item, i) => i !== cdFilterdCase)\r\n                    }else{\r\n                        updateList = state.initialCdItems.filter((item, i) => i !== action.payload.index)  \r\n                    }\r\n                }\r\n            return {\r\n                ...state,\r\n                initialRecordItems: action.payload.lsType === 'Vinyl Records' ?\r\n                    updateList : state.initialRecordItems,\r\n                initialCdItems: action.payload.lsType === 'Cds' ?\r\n                    updateList : state.initialCdItems,\r\n                filteredRecordLs:action.payload.lsType === 'Vinyl Records' ?\r\n                    state.filteredRecordLs.filter((item, i) => i !== action.payload.index) : state.filteredRecordLs,\r\n                filteredCdLs:action.payload.lsType === 'Cds' ?\r\n                    state.filteredCdLs.filter((item, i) => i !== action.payload.index) : state.filteredCdLs\r\n            } \r\n        case actionTypes.DUPLICATE:\r\n                let updateFilter = '' \r\n                if(state.filteredRecordLs.length > 0 && action.payload.lsType === 'Vinyl Records'){\r\n                     updateFilter= 'RecordsLs'\r\n                }else if(state.filteredCdLs.length > 0 && action.payload.lsType === 'Cds'){\r\n                     updateFilter= 'CdLs'\r\n                }\r\n         \r\n                return {\r\n                    ...state,\r\n                    initialRecordItems: action.payload.lsType === 'Vinyl Records' ?\r\n                        [...state.initialRecordItems, state.initialRecordItems[action.payload.index]] : state.initialRecordItems,\r\n                    initialCdItems: action.payload.lsType === 'Cds' ?\r\n                        [...state.initialCdItems, state.initialCdItems[action.payload.index]] : state.initialCdItems,\r\n                    filteredRecordLs: updateFilter === 'RecordsLs' ?\r\n                        [...state.filteredRecordLs, state.filteredRecordLs[action.payload.index]] : state.filteredRecordLs,\r\n                    filteredCdLs: updateFilter === 'CdLs' ?\r\n                        [...state.filteredCdLs, state.filteredCdLs[action.payload.index]] : state.filteredCdLs\r\n\r\n                } \r\n        default: \r\n            return state;\r\n    };\r\n    \r\n};\r\n\r\nexport default itemsListReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport itemsHandlerReducer from './store/reducers/itemsHandlerReducer';\n\n\nconst logger = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            return result;\n        }\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(itemsHandlerReducer, composeEnhancers(applyMiddleware(logger , thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}