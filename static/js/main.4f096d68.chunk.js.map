{"version":3,"sources":["components/Item/Item.js","components/SearchBar/SearchBar.js","store/actions/itemsHandler.js","store/actions/actionTypes.js","components/List/List.js","App.js","serviceWorker.js","store/reducers/itemsHandlerReducer.js","index.js"],"names":["Item","react_default","a","createElement","style","color","width","margin","padding","backgroundImage","concat","this","props","image","filter","backgroundSize","backgroundPosition","genre","height","borderRadius","src","artist_image","alt","artist_name","split","map","word","toUpperCase","slice","join","name","tracks_number","quantity_in_stock","quantity","Component","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","console","log","listType","filterList","search","current","value","React","createRef","_this2","label","ref","placeholder","onClick","event","filterReset","connect","dispatch","type","actionCreators","List","handleDelete","lsType","index","remove","handleDuplicate","dulipcate","title","components_SearchBar_SearchBar","className","listItems","item","key","components_Item_Item","App","storeInitialData","Data","vinyl_records","cds","components_List_List","filteredRecordLs","length","initialRecordItems","itemRemove","itemDuplicate","filteredCdLs","initialCdItems","state","list","itemType","toLowerCase","payload","InitialData","Boolean","window","location","hostname","match","initialState","itemsListReducer","arguments","undefined","action","objectSpread","toConsumableArray","searchedRecord","itemsToFilter","includes","alert","searchedCd","itemsToFilterCd","updateList","recordFilterdCase","indexOf","cdFilterdCase","i","updateFilter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","itemsHandlerReducer","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f096d68.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Item extends Component {\r\n    render(){\r\n        return(\r\n            <div style={{color: 'white', width: 300, margin: 10, padding: 10, backgroundImage: `url(${this.props.image}), linear-gradient(rgba(69, 69, 69, 0.6) 0%, rgba(0, 0, 0, 0.5) 100%)`,filter: 'grayscale(100%)', backgroundSize: 'cover', backgroundPosition: 'center'}}>\r\n                <p>{this.props.genre}</p>\r\n                <img style={{width: 100, height: 100, borderRadius: 100}} src={this.props.artist_image} alt='artist'/>\r\n                <p>{this.props.artist_name.split(' ')\r\n                .map(word => word[0].toUpperCase()+ word.slice(1))\r\n                .join(' ')}</p>\r\n\r\n                <p>{this.props.name.split(' ')\r\n                .map(word => word[0].toUpperCase()+ word.slice(1))\r\n                .join(' ')}</p>\r\n\r\n                <p>{this.props.tracks_number}</p>\r\n                <p>{this.props.quantity_in_stock}/{this.props.quantity}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item; ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../store/actions/index';\r\n\r\nclass SearchBar extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.search = React.createRef()\r\n\r\n      }\r\n    \r\n      onSubmit = () => {\r\n        console.log(this.props.listType)\r\n        this.props.filterList(this.search.current.value, this.props.listType)\r\n        this.search.current.value = ''\r\n    \r\n    }\r\n    render(){\r\n        console.log(this.search)\r\n        return(\r\n            <div>\r\n                    <input \r\n                    label = 'search'  \r\n                    ref={this.search} \r\n                    placeholder = {`Search for ${this.props.listType}`} \r\n                    />\r\n                    <button onClick = {event => this.onSubmit(event)}>search</button>\r\n                    <button onClick = {() => this.props.filterReset(this.props.listType)}>reset</button>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      filterList: (search, listType) => dispatch(actionCreators.filterList(search, listType)),\r\n      filterReset: (listType) => dispatch(actionCreators.filterReset(listType))\r\n  }\r\n}\r\n\r\nexport default connect('',mapDispatchToProps)(SearchBar)\r\n","import * as actionTypes from './actionTypes';\r\n\r\n\r\nexport const InitialData = (item , itemType) => {\r\n    item.artist_name = item.artist_name.toLowerCase()\r\n    item.name = item.name.toLowerCase()\r\n        \r\n    return {\r\n        type: actionTypes.STORE_INITIAL_DATA,\r\n        payload: {\r\n            item: item,\r\n            itemType: itemType\r\n        }\r\n    }\r\n}\r\n\r\nexport const storeInitialData = (list , itemType) => {\r\n    return dispatch => {   \r\n            list.map((item) => {\r\n                console.log(itemType) \r\n                return(\r\n                dispatch(InitialData(item, itemType)))\r\n                })\r\n    }\r\n}\r\n\r\nexport const filterList = (search, listType) => {\r\n    const filterActionType = \r\n        listType === 'Vinyl Records' ? actionTypes.FILTER_RECORDS_LIST : actionTypes.FILTER_CDS_LIST\r\n    return {\r\n        type: filterActionType,\r\n        search\r\n        \r\n    }\r\n}\r\n\r\nexport const filterReset = (listType) => {\r\n    return {\r\n        type: actionTypes.FILTER_RESET,\r\n        listType\r\n    }\r\n}\r\n\r\nexport const itemRemove = (lsType, index) => {\r\n    return {\r\n        type: actionTypes.REMOVE,\r\n        payload: {\r\n            lsType,\r\n            index\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const itemDuplicate = (lsType, index) => {\r\n    return {\r\n        type: actionTypes.DUPLICATE,\r\n        payload: {\r\n            lsType,\r\n            index\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// export const setSelectedMovieData = (payload) => {\r\n//     const durationHandler = formatDuration(payload.contentDetails.duration) \r\n//     const publishedDateHandler = new Date(payload.snippet.publishedAt).toString().split(' ')\r\n//     const viewsHandler = formatViews(payload.statistics.viewCount)\r\n//     return {\r\n//         type: actionTypes.SET_SELECTED_MOVIE_INFO,\r\n//         payload:{\r\n//             Title: payload.snippet.title,\r\n//             ChannelTitle: payload.snippet.channelTitle,\r\n//             ChannelId: payload.snippet.channelId,\r\n//             PublishedAt: `${publishedDateHandler[1]} ${publishedDateHandler[2]}, ${publishedDateHandler[3]}`,\r\n//             FormatedDur: durationHandler,\r\n//             Duration: payload.contentDetails.duration,\r\n//             ViewCount: viewsHandler,\r\n//             SourceVC: payload.statistics.viewCount,\r\n//             VideoUrl: payload.snippet.thumbnails.medium.url,\r\n//             LikeCount:Number(payload.statistics.likeCount),\r\n//             DislikeCount: Number(payload.statistics.dislikeCount),\r\n//             FavoriteCount:Number(payload.favoriteCount),\r\n//             CommentsCount: payload.statistics.commentCount,\r\n//             Description: payload.snippet.description,\r\n//             DescriptionShorten: description(payload.snippet.description),\r\n//             VideoIdEmbedUrl: `https://www.youtube.com/embed/${payload.id}`,\r\n//             VideoIdId: payload.id,\r\n//             ReactionMode: null\r\n//             }\r\n//     }\r\n// }\r\n\r\n// export const fetchWatchMovie = (payload) => {\r\n//     return dispatch => { \r\n//             axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${payload}&key=${API_KEY}`)\r\n//             .then(res => {\r\n//                 dispatch(setSelectedMovieData(res.data.items[0]))\r\n//                 dispatch(initChannelData(res.data.items[0].snippet.channelId))})\r\n//             .catch(error => console.log(error))  \r\n//     }\r\n// }\r\n\r\n// export const setChannelData = (payload) => {\r\n//     return {\r\n//         type: actionTypes.SET_CHANNEL_DATA,\r\n//         payload: {\r\n//              Thumbnail: payload.snippet.thumbnails.default.url,\r\n//              Title:payload.snippet.title,\r\n//             }\r\n//     }\r\n// }\r\n\r\n// export const initChannelData = (ChannelID) => {\r\n//     return dispatch => { \r\n//         axios.get(`https://www.googleapis.com/youtube/v3/channels?part=snippet,contentDetails,statistics&id=${ChannelID}&key=${API_KEY}`)\r\n//              .then(res => {\r\n//                  dispatch(setChannelData(res.data.items[0]))})\r\n//                 .catch(error => console.log(error))       \r\n//     }\r\n// }\r\n\r\n// export const setSelectedMovieComments = (payload) => {\r\n//     const pubdate = formatDate(payload.snippet.topLevelComment.snippet.publishedAt)\r\n\r\n//     return {\r\n//         type: actionTypes.SET_MOVIE_COMMENTS,\r\n//         payload:{\r\n//             CommentId:payload.id,\r\n//             Comment: payload.snippet.topLevelComment.snippet.textDisplay,\r\n//             UserPic: payload.snippet.topLevelComment.snippet.authorProfileImageUrl.replace('s28','s40'),\r\n//             AuthorDisplayName: payload.snippet.topLevelComment.snippet.authorDisplayName,\r\n//             LikeCount: payload.snippet.topLevelComment.snippet.likeCount,\r\n//             DislikeCount: payload.snippet.topLevelComment.snippet.dislikeCount? payload.snippet.topLevelComment.snippet.dislikeCount : 0 ,\r\n//             ReactionMode: null,\r\n//             PublishdAtSource: payload.snippet.topLevelComment.snippet.publishedAt,\r\n//             PublishedAt: pubdate\r\n//         }\r\n        \r\n//     }\r\n// }\r\n\r\n// export const setSelectedMovieDataComments = (payload) => {\r\n//     return {\r\n//         type: actionTypes.SET_MOVIE_DATA_COMMENTS,\r\n//         payload    \r\n//     }\r\n// }\r\n\r\n// export const clearCommentsList = (dataMode) => {\r\n//     return {\r\n//     type: actionTypes.CLEAR_COMMENTS_LIST,\r\n//     payload: dataMode\r\n//     }\r\n// }\r\n\r\n// export const initMovieComments = (movieId) => {\r\n//     return dispatch => {   \r\n//         axios.all([\r\n//             axios.get(`https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&videoId=${movieId}&key=${API_KEY}`),\r\n//             axios.get(`https://yt-clone-e7862.firebaseio.com/comments/${movieId}.json`)\r\n//         ])\r\n//         .then(axios.spread((res1, res2) => {\r\n//             res1.data.items.map(comment => \r\n//                 dispatch(setSelectedMovieComments(comment)))\r\n//             Object.values(res2.data).map(comment =>\r\n//                 dispatch(setSelectedMovieDataComments(comment)))\r\n//             }))\r\n//             .catch(error => console.log(error))\r\n//     }\r\n// }\r\n\r\n// export const reactionHandler = (reactionMode,reactiontype,reactionid) => {\r\n//         if (reactiontype === 'movie'){ \r\n//         return {\r\n//             type: actionTypes.MOVIE_REACTION_ADJUSMENTS,\r\n//             reaction: reactionMode\r\n//         }\r\n//         }else if (reactiontype === 'comment'){\r\n//             return{\r\n//             type: actionTypes.COMMENT_REACTION_ADJUSMENTS,\r\n//             reaction: reactionMode,\r\n//             id:reactionid\r\n//         }\r\n// }\r\n// }\r\n\r\n// export const handleCommentSubmit = (comment,movieId) => {\r\n//     const time = new Date(Date.now()).toISOString()\r\n//     const timeConverted = formatDate(time)\r\n//     const commentPayload = {\r\n//         AuthorDisplayName:'Benny Pakman',\r\n//         Comment: comment,\r\n//         CommentId: comment,\r\n//         DislikeCount: 0,\r\n//         LikeCount: 0,\r\n//         PublishedAt: timeConverted,\r\n//         ReactionMode: \"\",\r\n//         UserPic: 'https://yt3.ggpht.com/-PcciNQlrmUE/AAAAAAAAAAI/AAAAAAAAAAA/D1j1-rfjOpw/s88-c-k-no-mo-rj-c0xffffff/photo.jpg',\r\n//       }\r\n//       axios.post(`https://yt-clone-e7862.firebaseio.com/comments/${movieId}.json`,commentPayload)\r\n\r\n//       return (\r\n//         {\r\n//         type: actionTypes.ADD_COMMENT,\r\n//         payload: commentPayload\r\n//         }\r\n//     )\r\n// }","export const STORE_INITIAL_DATA = 'STORE_INITIAL_DATA';\r\nexport const FILTER_RECORDS_LIST = 'FILTER_RECORDS_LIST';\r\nexport const FILTER_CDS_LIST = 'FILTER_CDS_LIST';\r\nexport const FILTER_RESET = 'FILTER_RESET';\r\nexport const REMOVE = 'REMOVE';\r\nexport const DUPLICATE = 'DUPLICATE'","import React, { Component } from 'react';\r\nimport Item from '../Item/Item';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\n\r\nimport './List.scss'\r\n\r\n\r\nclass List extends Component{\r\n  handleDelete = (lsType, index) => {\r\n    this.props.remove(lsType, index)\r\n  }\r\n\r\n  handleDuplicate = (lsType, index) => {\r\n    this.props.dulipcate(lsType, index)\r\n  }\r\n\r\n  render(){ \r\n    return (\r\n      <div>\r\n        <h2 style={{color: 'rgba(0, 0, 0, 0.85)'}}>{this.props.title}</h2>\r\n        <SearchBar listType = {this.props.title === 'Vinyl Records' ? 'Vinyl Records' : 'Cd'}/>\r\n        <div className= 'list-container'>\r\n          {this.props.listItems.map((item, index) => \r\n            <div key = {index}>\r\n            <Item\r\n                genre={item.genre}\r\n                artist_image={item.artist_image}\r\n                artist_name={item.artist_name}\r\n                name={item.name}\r\n                image={item.image}\r\n                tracks_number={item.tracks_number}\r\n                quantity_in_stock={item.quantity_in_stock}\r\n                quantity={item.quantity}\r\n            />\r\n            <button onClick= {() => this.handleDuplicate(this.props.title ,index)}>duplicate</button>\r\n            <button onClick= {() => this.handleDelete(this.props.title ,index)}>delete</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from './store/actions/index';\nimport List from './components/List/List'\nimport './App.scss';\nimport Data from './utilites/data';\n\nclass App extends Component{\n  componentDidMount(){\n    this.props.storeInitialData(Data.vinyl_records, 'records')\n    this.props.storeInitialData(Data.cds, 'cds')   \n  }\n  \n\nrender(){\n  return (\n    <div className=\"App\">\n      <List listItems=\n              {\n                this.props.filteredRecordLs.length > 0 ? \n                this.props.filteredRecordLs : \n                this.props.initialRecordItems\n              } \n            title= 'Vinyl Records'\n            remove= {this.props.itemRemove}\n            dulipcate= {this.props.itemDuplicate}/>              \n      <List listItems=             \n              {\n                this.props.filteredCdLs.length > 0 ? \n                this.props.filteredCdLs : \n                this.props.initialCdItems\n              } \n            title= 'Cds'\n            remove= {this.props.itemRemove}\n            dulipcate= {this.props.itemDuplicate}/>\n    </div>\n  );\n}\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    initialRecordItems: state.initialRecordItems,\n    initialCdItems: state.initialCdItems,\n    filteredRecordLs: state.filteredRecordLs,\n    filteredCdLs: state.filteredCdLs\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      storeInitialData: (list, type) => dispatch(actionCreators.storeInitialData(list, type)),\n      itemRemove: (lsType, index) => dispatch(actionCreators.itemRemove(lsType, index)),\n      itemDuplicate: (lsType, index) => dispatch(actionCreators.itemDuplicate(lsType, index)) \n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = { \r\n    initialCdItems:[],\r\n    initialRecordItems:[],\r\n    filteredRecordLs:[],\r\n    filteredCdLs:[]\r\n};\r\n\r\nconst itemsListReducer = (state= initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.STORE_INITIAL_DATA:\r\n            if(action.payload.itemType === 'records'){ \r\n                return ({\r\n                    ...state,\r\n                    initialRecordItems: [action.payload.item, ...state.initialRecordItems]\r\n                })\r\n            }else{ \r\n                return ({\r\n                    ...state,\r\n                    initialCdItems: [action.payload.item, ...state.initialCdItems]\r\n                })\r\n            }\r\n        case actionTypes.FILTER_RECORDS_LIST:\r\n            const searchedRecord = action.search.toLowerCase();\r\n            const itemsToFilter = state.initialRecordItems.filter(item => {\r\n                return (item.artist_name.includes(searchedRecord) || item.name.includes(searchedRecord))\r\n            })\r\n            itemsToFilter.length <=0 ? alert('no items as been found'): alert(`${itemsToFilter.length} items found`)\r\n\r\n            return {\r\n                ...state,\r\n                filteredRecordLs: itemsToFilter\r\n            }\r\n            case actionTypes.FILTER_CDS_LIST:\r\n                    const searchedCd = action.search.toLowerCase();\r\n                    const itemsToFilterCd = state.initialCdItems.filter(item => {\r\n                        return (item.artist_name.includes(searchedCd) || item.name.includes(searchedCd))\r\n                    })\r\n                    itemsToFilterCd.length <=0 ? alert('no items as been found'): alert(`${itemsToFilterCd.length} items found`)\r\n        \r\n                    return {\r\n                        ...state,\r\n                        filteredCdLs: itemsToFilterCd\r\n                    }\r\n  \r\n        case actionTypes.FILTER_RESET:\r\n            return {\r\n                ...state,\r\n                filteredRecordLs: action.listType === 'Vinyl Records' ? [] : state.filteredRecordLs,\r\n                filteredCdLs: action.listType === 'Cd' ? [] : state.filteredCdLs\r\n            } \r\n        case actionTypes.REMOVE:\r\n                let updateList = []\r\n                const recordFilterdCase = state.initialRecordItems.indexOf(state.filteredRecordLs[action.payload.index])\r\n                const cdFilterdCase = state.initialCdItems.indexOf(state.filteredCdLs[action.payload.index])\r\n                if(action.payload.lsType === 'Vinyl Records'){\r\n                    if(recordFilterdCase >= 0){\r\n                        updateList = state.initialRecordItems.filter((item, i) => i !== recordFilterdCase)\r\n                    }else{\r\n                        updateList = state.initialRecordItems.filter((item, i) => i !== action.payload.index)  \r\n                    }\r\n                }else if(action.payload.lsType === 'Cds'){\r\n                    if(cdFilterdCase >= 0){\r\n                        updateList = state.initialCdItems.filter((item, i) => i !== cdFilterdCase)\r\n                    }else{\r\n                        updateList = state.initialCdItems.filter((item, i) => i !== action.payload.index)  \r\n                    }\r\n                }\r\n            return {\r\n                ...state,\r\n                initialRecordItems: action.payload.lsType === 'Vinyl Records' ?\r\n                    updateList : state.initialRecordItems,\r\n                initialCdItems: action.payload.lsType === 'Cds' ?\r\n                    updateList : state.initialCdItems,\r\n                filteredRecordLs:action.payload.lsType === 'Vinyl Records' ?\r\n                    state.filteredRecordLs.filter((item, i) => i !== action.payload.index) : state.filteredRecordLs,\r\n                filteredCdLs:action.payload.lsType === 'Cds' ?\r\n                    state.filteredCdLs.filter((item, i) => i !== action.payload.index) : state.filteredCdLs\r\n            } \r\n        case actionTypes.DUPLICATE:\r\n                let updateFilter = '' \r\n                if(state.filteredRecordLs.length > 0 && action.payload.lsType === 'Vinyl Records'){\r\n                     updateFilter= 'RecordsLs'\r\n                }else if(state.filteredCdLs.length > 0 && action.payload.lsType === 'Cds'){\r\n                     updateFilter= 'CdLs'\r\n                }\r\n         \r\n                return {\r\n                    ...state,\r\n                    initialRecordItems: action.payload.lsType === 'Vinyl Records' ?\r\n                        [...state.initialRecordItems, state.initialRecordItems[action.payload.index]] : state.initialRecordItems,\r\n                    initialCdItems: action.payload.lsType === 'Cds' ?\r\n                        [...state.initialCdItems, state.initialCdItems[action.payload.index]] : state.initialCdItems,\r\n                    filteredRecordLs: updateFilter === 'RecordsLs' ?\r\n                        [...state.filteredRecordLs, state.filteredRecordLs[action.payload.index]] : state.filteredRecordLs,\r\n                    filteredCdLs: updateFilter === 'CdLs' ?\r\n                        [...state.filteredCdLs, state.filteredCdLs[action.payload.index]] : state.filteredCdLs\r\n\r\n                } \r\n        default: \r\n            return state;\r\n    };\r\n    \r\n};\r\n\r\nexport default itemsListReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport itemsHandlerReducer from './store/reducers/itemsHandlerReducer';\n\n\nconst logger = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            return result;\n        }\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(itemsHandlerReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}